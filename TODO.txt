
Assert.Less(a1, a2);
Assert.LessOrEqual(a1, a2);
Assert.Greater(a1, a2);
Assert.GreaterOrEqual(a1, a2);

	Assert.IsTrue(a1 < a2)
	Assert.IsTrue(a1 <= a2)
	Assert.IsTrue(a1 > a2)
	Assert.IsTrue(a1 >= a2)

[TestDataSource("name")]

		[DynamicData(nameof(BytePoolInstances), DynamicDataSourceType.Method)]
		[DynamicData(nameof(BytePoolInstances), DynamicDataSourceType.Property)]

[ClassInitialize]
[ClassCleanup]

		Methods must be "static".


Assert.That(actual.ToList(), Is.EqualTo(expected.ToList()).Using(new MyComparer()));

	CollectionAssert.AreEqual(actual.ToList(), expected.ToList(), new MyComparer());
	
Assert.That(actual.ToList(), Is.EquivalentTo(expected.ToList()).Using(new MyComparer()));

	CollectionAssert.AreEquivalent() does not support a custom comparer.

Assert.That(actual, Is.EqualTo(expected).Using(new MyComparer()));

    Assert.*Equal() does not support using a custom comparer.

	Workaround:

	CollectionAssert.AreEqual(new [] { actual }, new [] { expected }, newe MyComparer());

Assert.That(() => result, Is.Not.Null);
Assert.That(() => result.Foo, Is.EqualTo(options.Foo));
Assert.That(() => result.Foo, Is.Empty);
Assert.That(() => result.Foo, Is.Empty);
Assert.That(() => result, Is.Not.Null.Or.Empty, "dldldl");

    Could all be converted to simple "Assert.AreEqual", "Assert.IsEmpty", etc.
    because the expression is just a value.

Assert.That(() => /*whatever*/, Throws.InnerException.InstanceOf<DirectoryNotFoundException>());
Assert.That(() => /*whatever*/, Throws.InnerException.TypeOf<DirectoryNotFoundException>());

    Can be manually handled by:

            Assert.InstanceOfType(Assert.ThrowsException<Exception>(() => /*whatever*/).InnerException, typeof(DirectoryNotFoundException));

            Assert.AreEqual(Assert.ThrowsException<Exception>(() => /*whatever*/).InnerException?.GetType(), typeof(DirectoryNotFoundException));
