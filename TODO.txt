
-----------------------------------------------------------------------------------------
Bugs?
-----------------------------------------------------------------------------------------

[TestMethod, TestCaseSource(typeof(TD), "xxx")]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
				 not transformed

[TestInitialize], [TestCleanup]

	"Method <FOO> has wrong signature. The method must be non-static, public, does not return a value and should not take any parameter.
	Additionally, if you are using async-await in method then return-type must be Task."

[ClassInitialize], [ClassCleanup]

	"Method <FOO> has wrong signature. The method must be static, public, does not return a value and have a parameter of type TestContext.
	Additionally, if you are using async-await in method then return-type must be Task."

-----------------------------------------------------------------------------------------
Package
-----------------------------------------------------------------------------------------

Make sure that project that has been selected, has successfully been built, is up to date,
and no contained files are unsaved, etc.

-----------------------------------------------------------------------------------------
Asserts
-----------------------------------------------------------------------------------------

Assert.IsInstanceOfType, ...

	Assert.IsInstanceOfType(exp, type)

CollectionAssert.AreEqual(ICollection, ICollection)

	CollectionAssert.AreEqual(v1?.ToArray(), v2?.ToArray())

Assert.AreEqual(<collection type>, <collection type>)

	CollectionAssert.AreEqual( ... )

Assert.That(actual.ToList(), Is.EqualTo(expected.ToList()).Using(new MyComparer()));

    CollectionAssert.AreEqual(actual.ToList(), expected.ToList(), new MyComparer());
    
Assert.That(actual.ToList(), Is.EquivalentTo(expected.ToList()).Using(new MyComparer()));

    CollectionAssert.AreEquivalent() does not support a custom comparer.

Assert.That(actual, Is.EqualTo(expected).Using(new MyComparer()));

    Assert.*Equal() does not support using a custom comparer.

    Workaround:

    CollectionAssert.AreEqual(new [] { actual }, new [] { expected }, new MyComparer());

Assert.That(() => result, Is.Not.Null);
Assert.That(() => result.Foo, Is.EqualTo(options.Foo));
Assert.That(() => result.Foo, Is.Empty);
Assert.That(() => result.Foo, Is.Empty);
Assert.That(() => result, Is.Not.Null.Or.Empty, "dldldl");

    Could all be converted to simple "Assert.AreEqual", "Assert.IsEmpty", etc.
    because the expression is just a value.

Assert.That(() => /*whatever*/, Throws.InnerException.InstanceOf<DirectoryNotFoundException>());
Assert.That(() => /*whatever*/, Throws.InnerException.TypeOf<DirectoryNotFoundException>());

    Can be manually handled by:

            Assert.InstanceOfType(Assert.ThrowsException<Exception>(() => /*whatever*/).InnerException, typeof(DirectoryNotFoundException));

            Assert.AreEqual(Assert.ThrowsException<Exception>(() => /*whatever*/).InnerException?.GetType(), typeof(DirectoryNotFoundException));
