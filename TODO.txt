
-----------------------------------------------------------------------------------------
Bugs?
-----------------------------------------------------------------------------------------

We did convert Assert.That(() => Dummy, Throws.InstanceOf<OutOfMemoryException>()) to
something like this: 

    Assert.IsInstanceOfType(Assert.ThrowsException<Exception>(Dummy),typeof(OutOfMemoryException));

This doesn't work in practice, because Assert.ThrowsException<Exception>(),
will fail if not exactly System.Exception is thrown.

We would need to do something like this:

    try {
        /* test */
        Assert.Fail($"Expected exception of type {exceptionType}.");
    } catch (Exception ex) when (!(ex is AssertFailException)) {
        Assert.IsInstanceOfType(ex, exceptionType);
    }

So currently, this is commented out and will not be converted.

-----------------------------------------------------------------------------------------
Package
-----------------------------------------------------------------------------------------

Make sure that project that has been selected, has successfully been built, is up to date,
and no contained files are unsaved, etc.

-----------------------------------------------------------------------------------------
Asserts
-----------------------------------------------------------------------------------------

CollectionAssert.AreEqual(ICollection, ICollection)

    CollectionAssert.AreEqual(v1?.ToArray(), v2?.ToArray())

Assert.AreEqual(<collection type>, <collection type>)

    CollectionAssert.AreEqual( ... )

Assert.That(actual.ToList(), Is.EqualTo(expected.ToList()).Using(new MyComparer()));

    CollectionAssert.AreEqual(actual.ToList(), expected.ToList(), new MyComparer());
    
Assert.That(actual.ToList(), Is.EquivalentTo(expected.ToList()).Using(new MyComparer()));

    CollectionAssert.AreEquivalent() does not support a custom comparer.

Assert.That(actual, Is.EqualTo(expected).Using(new MyComparer()));

    Assert.*Equal() does not support using a custom comparer.

    Workaround:

    CollectionAssert.AreEqual(new [] { actual }, new [] { expected }, new MyComparer());

Assert.That(() => result, Is.Not.Null);
Assert.That(() => result.Foo, Is.EqualTo(options.Foo));
Assert.That(() => result.Foo, Is.Empty);
Assert.That(() => result.Foo, Is.Empty);
Assert.That(() => result, Is.Not.Null.Or.Empty, "dldldl");

    Could all be converted to simple "Assert.AreEqual", "Assert.IsEmpty", etc.
    because the expression is just a value.

Assert.That(() => /*whatever*/, Throws.InnerException.InstanceOf<DirectoryNotFoundException>());
Assert.That(() => /*whatever*/, Throws.InnerException.TypeOf<DirectoryNotFoundException>());

    Must be manually handled.

